{
  "_from": "vue-notification",
  "_id": "vue-notification@1.3.13",
  "_inBundle": false,
  "_integrity": "sha512-GBCpsd+usRF2EhLWl2/rzNWErYnlo+HoKV7G0LL6c/Iy2eo2ikpwVXlDAUepOQaeq0hJoDu0oyUfhKBRL1AosA==",
  "_location": "/vue-notification",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vue-notification",
    "fetchSpec": "latest",
    "name": "vue-notification",
    "raw": "vue-notification",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-notification/-/vue-notification-1.3.13.tgz",
  "_shasum": "e9a6d61888c8a4c91a4d3595f8e272462484016f",
  "_spec": "vue-notification",
  "_where": "/home/mariano/Programacion/Repositorios/beerraVue2",
  "author": {
    "email": "yev.vlasenko@gmail.com",
    "name": "euvl"
  },
  "bugs": {
    "url": "https://github.com/euvl/vue-notification/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Vue.js Notification Library",
  "devDependencies": {
    "avoriaz": "^3.2.0",
    "babel-core": "^6.0.0",
    "babel-loader": "^6.0.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-latest": "^6.0.0",
    "babel-preset-stage-2": "^6.24.1",
    "chai": "^4.1.1",
    "cross-env": "^3.0.0",
    "css-loader": "^0.25.0",
    "file-loader": "^0.9.0",
    "karma": "^1.7.0",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-phantomjs-shim": "^1.4.0",
    "karma-sinon-chai": "^1.3.1",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "0.0.31",
    "karma-webpack": "^2.0.4",
    "mocha": "^3.5.0",
    "node-sass": "^4.5.0",
    "sass-loader": "^5.0.1",
    "sinon": "^3.2.0",
    "sinon-chai": "^2.12.0",
    "velocity-animate": "^1.5.1",
    "vue": "^2.0.0",
    "vue-loader": "^11.1.4",
    "vue-template-compiler": "^2.0.0",
    "webpack": "^2.7.0",
    "webpack-dev-server": "^2.7.1",
    "webpack-merge": "^4.1.1"
  },
  "homepage": "https://github.com/euvl/vue-notification#readme",
  "keywords": [
    "front-end",
    "notification",
    "vue",
    "vue-notification",
    "vue-notifications",
    "vuejs",
    "web"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "vue-notification",
  "optionalDependencies": {},
  "peerDependencies": {
    "vue": "^2.0.0"
  },
  "private": false,
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "<p align=\"right\">\n  <a href=\"https://www.buymeacoffee.com/yev\" target=\"_blank\">\n  <img width=\"200\" alt=\"screen shot 2018-03-01 at 10 33 39\" src=\"https://user-images.githubusercontent.com/1577802/36840220-21beb89c-1d3c-11e8-98a4-45fc334842cf.png\">\n  </a>\n</p>\n\n[![npm version](https://badge.fury.io/js/vue-notification.svg)](https://badge.fury.io/js/vue-notification)\n[![npm](https://img.shields.io/npm/dm/vue-notification.svg)](https://www.npmjs.com/package/vue-notification)\n\n### Vue.js notifications\n\nDemo: http://vue-notification.yev.io/\n\n<p align=\"center\">\n  <img src=\"https://media.giphy.com/media/xUn3C6FmbGmszMem64/giphy.gif\">\n</p>\n\n### Install\n\n```bash\nnpm install --save vue-notification\n```\n\n### How to\n\nIn main.js:\n\n```javascript\nimport Vue           from 'vue'\nimport Notifications from 'vue-notification'\n\n/*\nor for SSR: \nimport Notifications from 'vue-notification/dist/ssr.js'\n*/\n\nVue.use(Notifications)\n```\n\nIn App.vue:\n\n```vue\n<notifications group=\"foo\" />\n```\n\nIn any of your vue files:\n\n```javascript\nthis.$notify({\n  group: 'foo',\n  title: 'Important message',\n  text: 'Hello user! This is a notification!'\n});\n```\n\nAnywhere else: \n\n```javascript\nimport Vue from 'vue'\n\nVue.notify({\n  group: 'foo',\n  title: 'Important message',\n  text: 'Hello user! This is a notification!'\n})\n```\n\n### Props\n\nAll props are optional.\n\n| Name           | Type    | Default      | Description |\n| ---           | ---     | ---          | ---         |\n| group          | String  | null         | Name of the notification holder, if specified |\n| width          | Number/String  | 300          | Width of notification holder, can be `%`, `px` string or number.<br>Valid values: '100%', '200px', 200 |\n| classes        | String/Array | 'vue-notification' | List of classes that will be applied to notification element |\n| position       | String/Array | 'top right'  | Part of the screen where notifications will pop out |\n| animation-type | String  | 'css'      | Type of animation, currently supported types are `css` and `velocity` |\n| animation-name | String  | null       | Animation name required for `css` animation |\n| animation      | Object  | `$`*         | Animation configuration for `Velocity` animation |\n| duration       | Number  | 3000         | Time (ms) animation stays visible (if **negative** - notification will stay **forever** or until clicked) |\n| speed          | Number  | 300          | Speed of animation showing/hiding |\n| max            | Number  | Infinity     | Maximum number of notifications that can be shown in notification holder |\n| reverse        | Boolean | false        | Show notifications in reverse order |\n\n$ = `{enter: {opacity: [1, 0]}, leave: {opacity: [0, 1]}}`\n\n### API\n\n```javascript\n  this.$notify({\n    // (optional)\n    // Name of the notification holder\n    group: 'foo',\n\n    // (optional)\n    // Class that will be assigned to the notification\n    type: 'warn',\n\n    // (optional)\n    // Title (will be wrapped in div.notification-title)\n    title: 'This is title',\n\n    // Content (will be wrapped in div.notification-content)\n    text: 'This is <b> content </b>',\n\n    // (optional)\n    // Overrides default/provided duration\n    duration: 10000,\n\n    // (optional)\n    // Overrides default/provided animation speed\n    speed: 1000\n\n    // (optional)\n    // Data object that can be used in your template\n    data: {}\n  })\n```\n\nTitle and Text can be HTML strings.\n\nAlso you can use simplified version:\n\n```javascript\nthis.$notify('text')\n```\n\n### Groups\n\nIf you are planning to use `notification` component for 2 or more completely different types of notifications (for example, authentication error messages in top center and generic app notifications in bottom-right corner) - you can specify `group` property which is essentially a name of notification holder.\n\nExample:\n\n```vue\n<notifications group=\"auth\"/>\n<notifications group=\"app\"/>\n```\n\n```javascript\nthis.$notify({ group: 'auth', text: 'Wrong password, please try again later' })\n```\n\n### Position\n\n`Position` property requires a string with 2 keywords for vertical and horizontal postion.\n\nFormat: `\"<vertical> <horizontal>\"`.\n\n- Horizontal options: `left`, `center`, `right`\n- Vertical options: `top`, `bottom`\n\nDefault is \"top right\".\n\nExample:\n\n```vue\n<notifications position=\"top left\"/>\n```\n\n### Style\n\nYou can write your own css styles for notifications:\n\nStructure:\n\n```scss\n// SCSS:\n\n.my-style {\n  // Style of the notification itself\n\n  .notification-title {\n    // Style for title line\n  }\n\n  .notification-content {\n    // Style for content\n  }\n\n  &.my-type {\n    /*\n    Style for specific type of notification, will be applied when you\n    call notification with \"type\" parameter:\n    this.$notify({ type: 'my-type', message: 'Foo' })\n    */\n  }\n}\n```\n\nTo apply this style you will have to specify \"classes\" property:\n\n```vue\n  <notifications classes=\"my-style\"/>\n```\n\n**Default:**\n\n```scss\n.vue-notification {\n  padding: 10px;\n  margin: 0 5px 5px;\n\n  font-size: 12px;\n\n  color: #ffffff;\n  background: #44A4FC;\n  border-left: 5px solid #187FE7;\n\n  &.warn {\n    background: #ffb648;\n    border-left-color: #f48a06;\n  }\n\n  &.error {\n    background: #E54D42;\n    border-left-color: #B82E24;\n  }\n\n  &.success {\n    background: #68CD86;\n    border-left-color: #42A85F;\n  }\n}\n```\n\n### Custom template (slot)\n\nOptional scope slot named \"body\" is supported.\n\nScope props:\n\n| Name  | Type     | Description                         |\n| ---   | ---      | ---                                 |\n| item  | Object   | notification object                 |\n| close | Function | when called closes the notification |\n\nExample:\n\n```vue\n<notifications group=\"custom-template\"  \n               position=\"bottom right\">\n   <template slot=\"body\" slot-scope=\"props\">\n    <div>\n        <a class=\"title\">\n          {{props.item.title}}\n        </a>\n        <a class=\"close\" @click=\"props.close\">\n          <i class=\"fa fa-fw fa-close\"></i>\n        </a>\n        <div v-html=\"props.item.text\">\n        </div>\n    </div>\n  </template>\n</notifications>\n```\n<a name=\"velocity_animation\"></a>\n\n\n### Width\n\nWidth can be set using a string with a percent or pixel extension (if simple number is not enough).\n\nExamples: '100%', '50px', '50', 50\n\n### Velocity Animation\n\nPlugin can use use `Velocity` library to make js-powered animations. To start using it you will have to manually install `velocity-animate` & supply the librarty to `vue-notification` plugin (reason for doing that is to reduce the size of this plugin).\n\nIn your `main.js`:\n\n```javascript\nimport Vue           from 'vue'\nimport Notifications from 'vue-notification'\nimport velocity      from 'velocity-animate'\n\nVue.use(Notifications, { velocity })\n```\n\nIn the template you will have to set `animation-type=\"velocity\"`.\n\n```vue\n<notifications animation-type=\"velocity\"/>\n```\n\nThe animation configuration consists of 2 objects/functions: `enter` and `leave`.\n\nExample:\n\n```javascript\n/*\n * Both 'enter' and 'leave' can be either an object or a function\n */\nanimation = {\n  enter (element) {\n     /*\n      *  \"element\" - is a notification element\n      *    (before animation, meaning that you can take it's initial height, width, color, etc)\n      */\n     let height = element.clientHeight\n\n     return {\n       // Animates from 0px to \"height\"\n       height: [height, 0],\n\n       // Animates from 0 to random opacity (in range between 0.5 and 1)\n       opacity: [Math.random() * 0.5 + 0.5, 0]\n     }  \n  },\n  leave: {\n    height: 0,\n    opacity: 0\n  }\n}\n```\n\n```vue\n<notifications\n  animation-type=\"velocity\"\n  animation=\"animation\"/>\n```\n\n### Cleaning\n\nTo remove all notifications, use `clean: true` parameter.\n\n```javascript\nthis.$notify({\n  group: 'foo',\n  clean: true\n})\n```\n\n### FAQ\n\nCheck closed issues with `FAQ` label to get answers for most asked questions.\n\n### Development\n\n```bash\nTo run an example:\n\n# Build main library\n\ncd vue-notification\nnpm install\nnpm run build\n\n# Build and run demo\n\ncd demo\nnpm install\nnpm run dev\n\n# Run tests\nnpm run test\n\n# Watch unit tests\nnpm run unit:watch\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/euvl/vue-notification.git"
  },
  "scripts": {
    "build": "npm run build:base && npm run build:ssr",
    "build:base": "cross-env NODE_ENV=production webpack --config webpack.config.js --progress --hide-modules",
    "build:ssr": "cross-env NODE_ENV=production webpack --config webpack.config.ssr.js --progress --hide-modules",
    "test": "npm run unit",
    "unit": "cross-env BABEL_ENV=test karma start test/unit/setup/karma.conf.js --single-run",
    "unit:watch": "cross-env BABEL_ENV=test karma start test/unit/setup/karma.conf.js --watch"
  },
  "types": "index.d.ts",
  "version": "1.3.13"
}
